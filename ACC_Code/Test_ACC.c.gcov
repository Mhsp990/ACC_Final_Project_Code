        -:    0:Source:Test_ACC.c
        -:    0:Graph:Test_ACC.gcno
        -:    0:Data:Test_ACC.gcda
        -:    0:Runs:1
        -:    1://Doxygen is still being implemented
        -:    2:#include "ACC_Code.h"
        -:    3:#include <CUnit/Basic.h>
        -:    4:#include <CUnit/CUnit.h>
        -:    5:#include <math.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        5:   10:int init_suite(void) { return 0; }
        5:   11:int clean_suite(void) { return 0; }
        -:   12:
        -:   13://///////// Test Suite 1
        -:   14://Test cases of "Time_Gap" output
        -:   15:
        -:   16:// Case that rain sansor is false
        1:   17:void test_timeGap(void) { CU_ASSERT(3 == timeGap(false)); } 
        -:   18:// Case that rain sansor is true
        1:   19:void test_timeGap_rain(void) { CU_ASSERT(6 == timeGap(true)); } 
        -:   20://////// Finished test Suite 1
        -:   21:
        -:   22:
        -:   23://///////// Test Suite 2
        -:   24://Test cases of "aux" output MC/DC 
        -:   25:
        -:   26://----------Test ID 22 MC/DC------------------//
        1:   27:void test_logicBLockAccEnable(void) {
        -:   28:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   29:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 11, 0,1); 
        1:   30:  CU_ASSERT(0 == i.aux);
        1:   31:}
        -:   32:
        -:   33://----------Test ID 38 MC/DC------------------//
        1:   34:void test_logicBLockAccEnable2(void) {
        -:   35:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   36:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 11, 1,0); 
        1:   37:  CU_ASSERT(0 == i.aux);
        1:   38:}
        -:   39:
        -:   40://----------Test ID 50 MC/DC------------------//
        1:   41:void test_logicBLockAccEnable3(void) {
        -:   42:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   43:  struct ACCenable i = logicBlockAccEnable(0, 1, 1, 11, 0,0); 
        1:   44:  CU_ASSERT(0 == i.aux);
        1:   45:}
        -:   46:
        -:   47://----------Test ID 53 MC/DC------------------//
        1:   48:void test_logicBLockAccEnable4(void) {
        -:   49:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   50:  struct ACCenable i = logicBlockAccEnable(1, 1, 0, 11, 0,0); 
        1:   51:  CU_ASSERT(1 == i.aux);
        1:   52:}
        -:   53:
        -:   54://----------Test ID 54 MC/DC------------------//
        1:   55:void test_logicBLockAccEnable5(void) {
        -:   56:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   57:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 11, 0,0); 
        1:   58:  CU_ASSERT(1 == i.aux);
        1:   59:}
        -:   60:
        -:   61://----------Test ID 56 MC/DC------------------//
        1:   62:void test_logicBLockAccEnable6(void) {
        -:   63:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   64:  struct ACCenable i = logicBlockAccEnable(0, 0, 0, 11, 0,0); 
        1:   65:  CU_ASSERT(0 == i.aux);
        1:   66:}
        -:   67:
        -:   68://----------Test ID 62 MC/DC------------------//
        1:   69:void test_logicBLockAccEnable7(void) {
        -:   70:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   71:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 10, 0,0); 
        1:   72:  CU_ASSERT(0 == i.aux);
        1:   73:}
        -:   74://////// Finished test Suite 2
        -:   75:
        -:   76:
        -:   77://////// Test Suite 3
        -:   78://Test cases of "Acc_enabled" output MC/DC
        -:   79:
        -:   80://----------Test ID 22 MC/DC------------------//
        1:   81:void test_logicBLockAccEnable8(void) {
        -:   82:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   83:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 11, 0,1); 
        1:   84:  CU_ASSERT(0 == i.ACC_enabled);
        1:   85:}
        -:   86:
        -:   87://----------Test ID 45 MC/DC------------------//
        1:   88:void test_logicBLockAccEnable9(void) {
        -:   89:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   90:  struct ACCenable i = logicBlockAccEnable(1, 1, 0, 10, 1,0); 
        1:   91:  CU_ASSERT(0 == i.ACC_enabled);
        1:   92:}
        -:   93:
        -:   94://----------Test ID 54 MC/DC------------------//
        1:   95:void test_logicBLockAccEnable10(void) {
        -:   96:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:   97:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 11, 0,0); 
        1:   98:  CU_ASSERT(1 == i.ACC_enabled);
        1:   99:}
        -:  100:
        -:  101://----------Test ID 57 MC/DC------------------//
        1:  102:void test_logicBLockAccEnable11(void) {
        -:  103:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:  104:  struct ACCenable i = logicBlockAccEnable(1, 1, 1, 10, 0,0); 
        1:  105:  CU_ASSERT(0 == i.ACC_enabled);
        1:  106:}
        -:  107:
        -:  108://----------Test ID 61 MC/DC------------------//
        1:  109:void test_logicBLockAccEnable12(void) {
        -:  110:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:  111:  struct ACCenable i = logicBlockAccEnable(1, 1, 0, 10, 0,0); 
        1:  112:  CU_ASSERT(1 == i.ACC_enabled);
        1:  113:}
        -:  114:
        -:  115://----------Test ID 62 MC/DC------------------//
        1:  116:void test_logicBLockAccEnable13(void) {
        -:  117:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:  118:  struct ACCenable i = logicBlockAccEnable(0, 1, 0, 10, 0,0); 
        1:  119:  CU_ASSERT(0 == i.ACC_enabled);
        1:  120:}
        -:  121:
        -:  122://----------Test ID 63 MC/DC------------------//
        1:  123:void test_logicBLockAccEnable14(void) {
        -:  124:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:  125:  struct ACCenable i = logicBlockAccEnable(1, 0, 0, 10, 0,0); 
        1:  126:  CU_ASSERT(0 == i.ACC_enabled);
        1:  127:}
        -:  128:
        -:  129://----------Test ID 29 MC/DC------------------//
        1:  130:void test_logicBLockAccEnable15(void) {
        -:  131:  //params: aux, ACC_input, Fault_signal, Ego_velo, Gas_pedal, Brake_pedal
        1:  132:  struct ACCenable i = logicBlockAccEnable(1, 1, 0, 10, 0,1); 
        1:  133:  CU_ASSERT(0 == i.ACC_enabled);
        1:  134:}
        -:  135://////// Finished test Suite 3
        -:  136:
        -:  137:
        -:  138://///////// Test Suite 4
        -:  139://Test cases of "ACC_speed_set" output
        -:  140:
        -:  141:// Case that ACC_speed_set is lower than 40km/h. Expects 40km/h
        1:  142:void test_speedSet_min(void) { CU_ASSERT_DOUBLE_EQUAL(40/3.6, speedSet(20), 0.1)} 
        -:  143:// Case that ACC_speed_set is between 40 and 120 km/h. Expects input value.
        1:  144:void test_speedSet_any(void) { CU_ASSERT_DOUBLE_EQUAL(50/3.6, speedSet(50), 0.1) }
        -:  145:// Case that ACC_speed_set is higher than 120km/h. Expects 120km/h
        1:  146:void test_speedSet_max(void) { CU_ASSERT_DOUBLE_EQUAL(120/3.6, speedSet(150), 0.1)}
        -:  147://////// Finished test Suite 4
        -:  148:
        -:  149:
        -:  150://////// Test Suite 5
        -:  151://Test cases of "Acceleration and Safe_distance" output
        -:  152:
        -:  153:// Case that slowdown is the minimum value = -5m/s²
        1:  154:void test_accelerationControl1(void) { 
        -:  155:  //params: ACC_enabled, Ego_velo, Time_Gap, ACC_speed_set, Relative_distance_past, Relative_distance_pres, interval
        1:  156:  struct ACCcontrol i = accelerationControl(1, 11, 3, 27, 20.00, 20.00, 0.01);
        1:  157:  CU_ASSERT_DOUBLE_EQUAL(-5, i.Acceleration, 0.1);
        1:  158:  CU_ASSERT_DOUBLE_EQUAL(43.00, i.Safe_distance, 0.2);
        1:  159:}
        -:  160:// Case that acceleration is maximum value = 1.47m/s²
        1:  161:void test_accelerationControl2(void) {
        -:  162:  //params: ACC_enabled, Ego_velo, Time_Gap, ACC_speed_set, Relative_distance_past, Relative_distance_pres, interval
        1:  163:  struct ACCcontrol i = accelerationControl(1, 15, 3, 27, 70, 70, 0.01);
        1:  164:  CU_ASSERT_DOUBLE_EQUAL(1.47, i.Acceleration, 0.1);
        1:  165:  CU_ASSERT_DOUBLE_EQUAL(55.00, i.Safe_distance, 0.2);
        1:  166:}
        -:  167:// Case that acceleration is zero = 0m/s²
        1:  168:void test_accelerationControl3(void) { 
        -:  169:  // ACC_enabled, Ego_velo, Time_Gap, ACC_speed_set, Relative_distance_past, Relative_distance_pres, interval
        1:  170:  struct ACCcontrol i = accelerationControl(0, 16.6, 3, 19.4, 2.7, 60, 0.01);
        1:  171:  CU_ASSERT_DOUBLE_EQUAL(0.0, i.Acceleration, 0.1);
        1:  172:}
        -:  173:// Case of slowdown
        1:  174:void test_accelerationControl4(void) {
        -:  175:  //params: ACC_enabled, Ego_velo, Time_Gap, ACC_speed_set, Relative_distance_past, Relative_distance_pres, interval
        1:  176:  struct ACCcontrol i = accelerationControl(1, 20, 3, 27, 65, 65, 0.01);
        1:  177:  CU_ASSERT_DOUBLE_EQUAL(-2.5, i.Acceleration, 0.1);
        1:  178:  CU_ASSERT_DOUBLE_EQUAL(70, i.Safe_distance, 0.2);
        1:  179:}
        -:  180:
        1:  181:void test_accelerationControl5(void) {
        -:  182:  //params: ACC_enabled, Ego_velo, Time_Gap, ACC_speed_set, Relative_distance_past, Relative_distance_pres, interval
        1:  183:  struct ACCcontrol i = accelerationControl(1, 15.80302, 3, 27.778, 60.48257, 60.46676, 0.001);
        1:  184:  CU_ASSERT_DOUBLE_EQUAL(1.47, i.Acceleration, 0.1);
        1:  185:  CU_ASSERT_DOUBLE_EQUAL(57.41, i.Safe_distance, 0.2);
        1:  186:}
        -:  187://////// Finished test Suite 5
        -:  188:
        -:  189:
        -:  190:
        -:  191:
        -:  192:
        -:  193:
        -:  194:
        -:  195:
        1:  196:int main(void) {
        1:  197:  CU_pSuite pSuite1, pSuite2, pSuite3, pSuite4, pSuite5 = NULL; //Suite declaration
        -:  198:
        1:  199:  if (CUE_SUCCESS != CU_initialize_registry()) //Connection check
    #####:  200:    return CU_get_error();
        -:  201:
        -:  202:
        -:  203:///////////// - Suite 1 - ///////////////////
        1:  204:  pSuite1 = CU_add_suite("Test Suite of Time_Gap from timegap() ", init_suite, clean_suite);
        -:  205:
        1:  206:  if (NULL == pSuite1) {
    #####:  207:    CU_cleanup_registry();
    #####:  208:    return CU_get_error();
        -:  209:  }
        -:  210:
        1:  211:  if ((NULL ==
        1:  212:       CU_add_test(pSuite1, "TimeGap function Testing without rain", test_timeGap))) {
    #####:  213:    CU_cleanup_registry();
    #####:  214:    return CU_get_error();
        -:  215:  }
        -:  216:
        1:  217:    if ((NULL ==
        1:  218:       CU_add_test(pSuite1, "TimeGap function Testing with rain", test_timeGap_rain))) {
    #####:  219:    CU_cleanup_registry();
    #####:  220:    return CU_get_error();
        -:  221:  }
        -:  222:
        -:  223:
        -:  224:///////////// - Suite 2 - ///////////////////
        1:  225:   pSuite2 = CU_add_suite("Test Suite of Aux output from logicBlockEnable()", init_suite, clean_suite);
        -:  226:  
        1:  227:  if (NULL == pSuite2) {
    #####:  228:    CU_cleanup_registry();
    #####:  229:    return CU_get_error();
        -:  230:  }
        -:  231:
        1:  232:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 1",
        -:  233:                           test_logicBLockAccEnable))) {
    #####:  234:    CU_cleanup_registry();
    #####:  235:    return CU_get_error();
        -:  236:  }
        -:  237:
        1:  238:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 2",
        -:  239:                           test_logicBLockAccEnable2))) {
    #####:  240:    CU_cleanup_registry();
    #####:  241:    return CU_get_error();
        -:  242:  }
        -:  243:
        1:  244:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 3",
        -:  245:                           test_logicBLockAccEnable3))) {
    #####:  246:    CU_cleanup_registry();
    #####:  247:    return CU_get_error();
        -:  248:  }
        -:  249:
        1:  250:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 4",
        -:  251:                           test_logicBLockAccEnable4))) {
    #####:  252:    CU_cleanup_registry();
    #####:  253:    return CU_get_error();
        -:  254:  }
        -:  255:
        1:  256:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 5",
        -:  257:                           test_logicBLockAccEnable5))) {
    #####:  258:    CU_cleanup_registry();
    #####:  259:    return CU_get_error();
        -:  260:  }
        -:  261:
        1:  262:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 6",
        -:  263:                           test_logicBLockAccEnable6))) {
    #####:  264:    CU_cleanup_registry();
    #####:  265:    return CU_get_error();
        -:  266:  }
        -:  267:
        1:  268:  if ((NULL == CU_add_test(pSuite2, "Aux Control function Test 7",
        -:  269:                           test_logicBLockAccEnable7))) {
    #####:  270:    CU_cleanup_registry();
    #####:  271:    return CU_get_error();
        -:  272:  }
        -:  273:
        -:  274:///////////// - Suite 3 - ///////////////////
        1:  275: pSuite3 = CU_add_suite("Test Suite of Acc_enabled output from logicBlockEnable()", init_suite, clean_suite);
        -:  276:  
        1:  277:  if (NULL == pSuite3) {
    #####:  278:    CU_cleanup_registry();
    #####:  279:    return CU_get_error();
        -:  280:  }
        -:  281:
        1:  282:  if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 1",
        -:  283:                           test_logicBLockAccEnable8))) {
    #####:  284:    CU_cleanup_registry();
    #####:  285:    return CU_get_error();
        -:  286:  }
        -:  287:
        1:  288:   if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 2",
        -:  289:                           test_logicBLockAccEnable9))) {
    #####:  290:    CU_cleanup_registry();
    #####:  291:    return CU_get_error();
        -:  292:  }
        -:  293:
        1:  294:    if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 3",
        -:  295:                           test_logicBLockAccEnable10))) {
    #####:  296:    CU_cleanup_registry();
    #####:  297:    return CU_get_error();
        -:  298:  }
        -:  299:
        1:  300:   if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 4",
        -:  301:                           test_logicBLockAccEnable11))) {
    #####:  302:    CU_cleanup_registry();
    #####:  303:    return CU_get_error();
        -:  304:  }
        -:  305:
        1:  306:   if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 5",
        -:  307:                           test_logicBLockAccEnable12))) {
    #####:  308:    CU_cleanup_registry();
    #####:  309:    return CU_get_error();
        -:  310:  }
        -:  311:
        1:  312:   if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 6",
        -:  313:                           test_logicBLockAccEnable13))) {
    #####:  314:    CU_cleanup_registry();
    #####:  315:    return CU_get_error();
        -:  316:  }
        -:  317:
        1:  318:   if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 7",
        -:  319:                           test_logicBLockAccEnable14))) {
    #####:  320:    CU_cleanup_registry();
    #####:  321:    return CU_get_error();
        -:  322:  }
        -:  323:
        1:  324:if ((NULL == CU_add_test(pSuite3, "Acc_enabled Control function Test 8",
        -:  325:                           test_logicBLockAccEnable15))) {
    #####:  326:    CU_cleanup_registry();
    #####:  327:    return CU_get_error();
        -:  328:  }
        -:  329:
        -:  330:///////////// - Suite 4 - ///////////////////
        1:  331:   pSuite4 = CU_add_suite("Test Suite of ACC_speed_set from speedSet()", init_suite, clean_suite);
        -:  332:  
        1:  333:  if (NULL == pSuite4) {
    #####:  334:    CU_cleanup_registry();
    #####:  335:    return CU_get_error();
        -:  336:  }
        -:  337:
        1:  338:  if ((NULL ==
        1:  339:       CU_add_test(pSuite4, "SpeedSet function Testing for values below range", test_speedSet_min))) {
    #####:  340:    CU_cleanup_registry();
    #####:  341:    return CU_get_error();
        -:  342:  }
        -:  343:
        1:  344:  if ((NULL ==
        1:  345:       CU_add_test(pSuite4, "SpeedSet function Testing for values within range", test_speedSet_any))) {
    #####:  346:    CU_cleanup_registry();
    #####:  347:    return CU_get_error();
        -:  348:  }
        -:  349:
        1:  350:  if ((NULL ==
        1:  351:       CU_add_test(pSuite4, "SpeedSet function Testing for values above range", test_speedSet_max))) {
    #####:  352:    CU_cleanup_registry();
    #####:  353:    return CU_get_error();
        -:  354:  }
        -:  355:
        -:  356:///////////// - Suite 5 - ///////////////////
        1:  357: pSuite5 = CU_add_suite("Test Suite of ACC_speed_set from speedSet()", init_suite, clean_suite);
        1:  358:   if (NULL == pSuite5) {
    #####:  359:    CU_cleanup_registry();
    #####:  360:    return CU_get_error();
        -:  361:  }
        -:  362:  
        1:  363:  if ((NULL == 
        1:  364:    CU_add_test(pSuite5, "Acceleration Control function Test 1",test_accelerationControl1))) {
    #####:  365:    CU_cleanup_registry();
    #####:  366:    return CU_get_error();
        -:  367:  }
        -:  368:
        1:  369:   if ((NULL == 
        1:  370:    CU_add_test(pSuite5, "Acceleration Control function Test 2",test_accelerationControl2))) {
    #####:  371:    CU_cleanup_registry();
    #####:  372:    return CU_get_error();
        -:  373:  }
        -:  374:
        1:  375:if ((NULL == 
        1:  376:    CU_add_test(pSuite5, "Acceleration Control function Test 3",test_accelerationControl3))) {
    #####:  377:    CU_cleanup_registry();
    #####:  378:    return CU_get_error();
        -:  379:  }
        -:  380:
        1:  381:  if ((NULL == 
        1:  382:    CU_add_test(pSuite5, "Acceleration Control function Test 4",test_accelerationControl4))) {
    #####:  383:    CU_cleanup_registry();
    #####:  384:    return CU_get_error();
        -:  385:  }
        -:  386:
        1:  387:  if ((NULL == 
        1:  388:    CU_add_test(pSuite5, "Acceleration Control function Test 5",test_accelerationControl5))) {
    #####:  389:    CU_cleanup_registry();
    #####:  390:    return CU_get_error();
        -:  391:  }
        -:  392:
        1:  393:  CU_basic_set_mode(CU_BRM_VERBOSE);
        1:  394:  CU_basic_run_tests();
        -:  395:
        1:  396:  CU_cleanup_registry();
        1:  397:  return CU_get_error();
        -:  398:}
